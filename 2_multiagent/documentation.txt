      The basic idea of the following implementation is that
      eating ghost is the first priority. This idea is based
      on the observation that to exceed 1450 points in average,
      it requires eating at least 3 or 4 ghosts in one game. 

      Note that the following strategy only works for smallClassic
      layout, but the basic idea could be apply to many other layouts

      In order to win the game with score higher than 1700, the pacman
      could follow the following steps:

          1. After the game starts, eat the closest capsule
          2. After eating capsule, eat as many ghosts as possible
          3. After eating all the ghosts or there is no enough time 
             to eat the next closest ghost, repeat step 1 and step 2
             until there is no more capsules.
             (in smallClassic case, there are only 2 capsules in total)
          4. Clean up all the food in the map

      Thus, to design an evaluation function especially for smallClassic
      layout, here I designed 5 cases besides the winning and losing gateState:

          case 1: before eating the 1st capsule
          case 2: after eating the 1st capsule and there are scared ghosts
          case 3: after eating the 1st capsule but there are no more scared ghosts
          case 4: after eating the 2nd capsule and there are scared ghosts
          case 5: there is no more any capsule and scared ghost in the map

      The following description would explain the design of return value
      and other details of each case:

          case 0:

              Before start, first check whether the gameState is the end of
              the game, return +99999 for winning case and -99999 for losing case.

              Also, if pacman is only 1 step beside any not scared ghost, return
              -10000 for this case since this may result in losing case.

          case 1:

              1st priority: eat the closest capsule

              to achieve this goal, return value is designed to be:

                  200 - len(capsules) * 100 + 1.0 / min(capsulesDist)

              where len(capsules) is number of capsules and min(capsulesDist)
              is the distance to the nearest capsule.

              This return value encourage pacman to go after capsule so as
              to decrease the value of min(capsulesDist).

              return value min: 200 - 2 * 100 + 0.xx  = 0.xx
              return value max: 200 - 2 * 100 + 1 / 1 = 1 (1 step before eating 1st capsule)

          case 2:

              subcase 2-1: 

              1st priority: eat the closest ghost

              to achieve this goal, return value is designed to be:

                  401 - scaredNum * 100 + 1.0 / pair[0]

              where scaredNum is number of scared ghosts, and pair[0] is 
              the distance to the nearest scared ghost.

              This return value encourage pacman to go after ghosts so as
              to decrease the value of pair[0]. Despite the value of pair[0]
              may increase right after eating the first ghost, scaredNum would
              decrease by 1 which in turn getting a much higher return value.

              return value min: 401 - 2 * 100 + 0.xx = 201.xx
              return value max: 401 - 1 * 100 + 1/1  = 302 (1 step before eating 2nd ghost)

              Note the the minimum value in this case should be larger than the
              maximum value in case 1, so that the pacman would be encouraged to 
              go from case 1 to case 2.

              subcase 2-2: 

              Lat but not least, if the remaining scared time is not enough to 
              chase any remaining scared ghost, then the 1 priority for pacman
              is to eat the 2nd capsule instead of keep chasing ghosts. Thus the
              return value for this scenario is designed to be:

                  300 - len(capsules) * 100 + 1.0 / min(capsulesDist)

              return value min: 300 - 1 * 100 + 0.xx = 200.xx
              return value max: 300 - 1 * 100 + 1/1  = 201 (1 step before eating 2nd capsule)

              Note that the maximum value in this subcase should be less than any value
              in subcase 2-1, since we should encourage pacman to eat all the scared ghosts
              as fast as possible. Also, any value in this subcase should be larger than
              any value in case 1, too.

          case 3:

              1st priority: eat the 2nd capsule

              to achieve this goal, return value is designed to be:

                  500 - len(capsules) * 100 + 1.0 / min(capsulesDist)

              return value min: 500 - 1 * 100 + 0.xx = 400.xx
              return value max: 500 - 1 * 100 + 1/1  = 401

              Note that the minimum value for this case should be larger
              than any value in case 2 to encourage pacman eating all the ghosts

          case 4:

              subcase 4-1:

              1st priority: eat the closest scared ghost

              to achieve this goal, return value is designed to be:

                  801 - scaredNum * 100 + 1.0 / pair[0]

              which have the same idea in case 2.

              return value min: 801 - 2 * 100 + 0.xx = 601.xx
              return value max: 801 - 1 * 100 + 1/1  = 702

              Note that the minimum return value have to be larger than
              any value in case 3 to encourage pacman going from case 3
              to case 4.

              subcase 4-2:

              Same as subcase 2-2. if there is no more time left for eating
              the next closest ghost, start cleaning up the map instead of
              keep chasing ghosts. To achieve this goal, return value is
              designed to be:

                  600 - foodNum + 1.0 / minFoodDist

              where foodNum is number of remaining food, and minFoodDist is
              the distance to the nearest food.

              This return value encourage pacman to go after the nearest food
              as well as eating all the remaining food.

              return value min: 600 - foodNum + 0.xx
              return value max: 600 - 1 + 1/1 = 600 (1 step before eating last food)

              Note that 0 < foodNum < 100, thus the minimum of return value is larger
              than 500 but less than 600, which matches the requirement that return value
              in this case should be less than subcase 4-1 but larger than any value in
              case 3.

              0 < foodNum  : if foodNum = 0 implies winning case
              foodNum < 100: there is no such space for 100 foodNum in this layout

          case 5:

              1st priority: eat the nearest food

              return value:

                  1000 - foodNum + 1.0 / minFoodDist

              return value min: 900.xx (0 < foodNum < 100)
              return value max: 1000 - 1 + 1/1 = 1000

              Note that the minimum value in this case should be larger than
              any other value in any other case described above.